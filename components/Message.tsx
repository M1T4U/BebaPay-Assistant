import React, { useState } from 'react';
import type { ChatMessage } from '../types';
import { CopyIcon, CheckIcon } from './Icons';
import type { Theme } from '../App';

interface MessageProps {
  message: ChatMessage;
  theme: Theme;
}

// Simple markdown parser for **bold** text.
const renderText = (text: string) => {
    const parts = text.split(/\*\*(.*?)\*\*/g);
    return parts.map((part, i) => {
        if (i % 2 === 1) {
            return (
                <strong key={i} className="font-bold text-emerald-400">
                    {part}
                </strong>
            );
        }
        return part;
    });
};

const Message: React.FC<MessageProps> = ({ message, theme }) => {
  const [isCopied, setIsCopied] = useState(false);
  const isBot = message.sender === 'bot';
  const isInitialGreeting = message.id.startsWith('bot-initial-');

  const botStyles = theme === 'dark' 
    ? 'bg-gray-800 text-gray-100 self-start' 
    : 'bg-gray-200 text-gray-800 self-start';
  
  const userStyles = 'bg-gradient-to-br from-green-500 to-teal-600 text-white self-end';
  
  const copyButtonStyles = theme === 'dark' 
    ? 'bg-gray-700 text-gray-300 hover:bg-gray-600'
    : 'bg-gray-300 text-gray-600 hover:bg-gray-400';

  const handleCopy = () => {
    if (message.text) {
      navigator.clipboard.writeText(message.text);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    }
  };


  return (
    <div className={`group flex items-start gap-3 my-2 ${isBot ? 'flex-row' : 'flex-row-reverse'}`}>
      {isBot && (
        <div className={`flex-shrink-0 w-8 h-8 flex items-center justify-center text-2xl ${message.isLoading ? 'animate-pulse' : ''}`}>
          <span role="img" aria-label="Recycle Emoji">♻️</span>
        </div>
      )}
      <div
        className={`relative max-w-md md:max-w-lg rounded-xl px-4 py-3 whitespace-pre-wrap animate-fade-in-up transition-colors duration-300 ${
          isBot ? botStyles : userStyles
        }`}
      >
        {message.text && <p>{renderText(message.text)}{message.isLoading && <span className="inline-block w-1 h-4 ml-1 bg-current animate-blink" />}</p>}
        {isBot && message.isLoading && !message.imageUrl && message.text.includes('Generating an image') && (
            <div className={`mt-2 rounded-lg w-full aspect-square animate-pulse ${theme === 'dark' ? 'bg-gray-700' : 'bg-gray-300'}`}></div>
        )}
        {message.imageUrl && (
            <div className={`mt-2 rounded-lg overflow-hidden ${theme === 'dark' ? 'bg-gray-900' : 'bg-gray-100'}`}>
                <img 
                    src={message.imageUrl} 
                    alt="Generated by BebaBot" 
                    className="w-full h-auto object-cover" 
                    aria-label={`Generated image for prompt: ${message.text}`}
                />
            </div>
        )}
         {isBot && message.text && !isInitialGreeting && !message.isLoading && (
            <div className="relative">
                 <button
                    onClick={handleCopy}
                    aria-label={isCopied ? "Copied" : "Copy message"}
                    className={`absolute -top-10 -right-2 p-1.5 rounded-full opacity-60 group-hover:opacity-100 transition-opacity duration-200 focus:opacity-100 focus:outline-none ${copyButtonStyles}`}
                >
                    {isCopied ? <CheckIcon className="w-4 h-4" /> : <CopyIcon className="w-4 h-4" />}
                </button>
                {isCopied && (
                    <div className={`absolute -top-12 right-6 px-2 py-1 text-xs rounded-md shadow-lg ${theme === 'dark' ? 'bg-gray-900 text-white' : 'bg-white text-black'}`}>
                        Copied!
                    </div>
                )}
            </div>
        )}
      </div>
    </div>
  );
};

export default Message;